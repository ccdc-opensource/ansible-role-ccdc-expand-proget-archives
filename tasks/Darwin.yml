---
- name: Insall Homebrew + required packages
  ansible.builtin.include_role:
    name: geerlingguy.mac.homebrew
  vars:
    # This is overwritten by our group_vars (cpp.build-machines)
    homebrew_installed_packages:
      - "{{ required_packages }}"
  when: not cpp_buildmachine

- name: "{{ proget_downloads_directory }}: Ensure download directory is present"
  ansible.builtin.file:
    path: "{{ proget_downloads_directory }}"
    state: directory
    owner: "{{ ansible_user }}"
    mode: "0755"
  become: true

- name: Ensure proget status archives directory is present
  ansible.builtin.file:
    path: "{{ proget_status_directory }}"
    state: directory
    owner: "{{ ansible_user }}"
    mode: "0755"
  become: true

- name: Add CCDC Homebrew tap
  community.general.homebrew_tap:
    name: ccdc-opensource/homebrew-packages
    state: present

- name: Install pgutils via Homebrew
  community.general.homebrew_cask:
    name: ccdc-opensource/packages/pgutils
    state: present

- name: Find pgutil binary location
  ansible.builtin.shell: which pgutil || find /usr/local /opt/homebrew /Applications -name pgutil -type f 2>/dev/null | head -1
  register: pgutil_path
  environment:
    PATH: "/opt/homebrew/bin:/usr/local/bin:{{ ansible_env.PATH }}"
  changed_when: false

- name: Remove quarantine attribute from pgutil
  ansible.builtin.command: xattr -d com.apple.quarantine "{{ pgutil_path.stdout }}"
  failed_when: false
  when: pgutil_path.stdout | length > 0

- name: Sign pgutil so Gatekeeper allows it
  become: true
  ansible.builtin.command: /usr/bin/codesign --force --sign - "{{ pgutil_path.stdout }}"
  when: pgutil_path.stdout | length > 0

- name: Check if source already exists
  ansible.builtin.command: "{{ pgutil_path.stdout }} sources list"
  register: existing_sources
  failed_when: false
  changed_when: false
  environment:
    PATH: "/opt/homebrew/bin:/usr/local/bin:{{ ansible_env.PATH }}"

- name: Debug existing sources
  debug:
    var: existing_sources
  when: existing_sources is defined

- name: Remove existing Default source if present
  ansible.builtin.command: "{{ pgutil_path.stdout }} sources remove --name={{ pgutil_source_name }}"
  failed_when: false
  when:
    - existing_sources.rc == 0
    - pgutil_source_name in existing_sources.stdout
  environment:
    PATH: "/opt/homebrew/bin:/usr/local/bin:{{ ansible_env.PATH }}"

- name: Add PGutil source
  ansible.builtin.command: "{{ pgutil_path.stdout }} sources add --name={{ pgutil_source_name }} --url={{ proget_base_url }} --api-key={{ ansible_deployment_proget_key }}"
  environment:
    PATH: "/opt/homebrew/bin:/usr/local/bin:{{ ansible_env.PATH }}"

- name: Get and expand archives
  ansible.builtin.include_tasks: expand_archive_posix.yml
  loop: "{{ archive_definitions }}"
  loop_control:
    loop_var: archive
